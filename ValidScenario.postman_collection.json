{
	"info": {
		"_postman_id": "d773d1c1-349c-4074-8a59-fb4fa6d9c57b",
		"name": "Valid Scenario",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43363550"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response contains access token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"accessToken\");",
							"    pm.expect(jsonData.accessToken).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response contains user details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"username\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"    pm.expect(jsonData.email).to.include(\"@\");",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.accessToken) { // <<== Correct field name",
							"        pm.environment.set(\"jwtToken\", jsonData.accessToken);",
							"        console.log(\"jwtToken saved successfully:\", jsonData.accessToken);",
							"    } else {",
							"        console.log(\"accessToken not found in response body.\");",
							"    }",
							"} else {",
							"    console.log(\"Login request failed. Cannot save jwtToken.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"emilys\",\n  \"password\": \"emilyspass\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/auth/login",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.email).to.include(\"@\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/auth/me",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"auth",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"First name is Ahmed\", function () {",
							"    pm.expect(pm.response.json().firstName).to.eql(\"Ahmed\");",
							"});",
							"pm.test(\"Last name is Magdy\", function () {",
							"    pm.expect(pm.response.json().lastName).to.eql(\"Magdy\");",
							"});",
							"pm.test(\"ID is 209\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(209);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\" : 209 ,\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"age\": 27 , \n    \"email\": \"{{email}}\",\n    \"phone\": \"{{phone}}\",\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/users/add",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Todo is 'Buy new product'\", function () {",
							"    pm.expect(pm.response.json().todo).to.eql(\"Want to buy a new product\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"todo\": \"Want to buy a new product\",\n    \"completed\": false,\n    \"userId\": \"{{UserId}}\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/todos/add",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"todos",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get A Single To Do",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/todos/{{TodoId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"todos",
						"{{TodoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products By A Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"All products belong to category smartphones\", function () {",
							"    let products = pm.response.json().products;",
							"    products.forEach(product => {",
							"        pm.expect(product.category).to.eql(\"smartphones\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/products/category/{{CategoryName}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products",
						"category",
						"{{CategoryName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Response body contains the expected product details\", function () {",
							"    var responseJson = pm.response.json();",
							"    ",
							"    pm.expect(responseJson.id).to.eql(168);",
							"    pm.expect(responseJson.title).to.eql(\"Charger SXT RWD\");",
							"    pm.expect(responseJson.price).to.eql(130);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\":\"168\" ,\n  \"price\": 130 \n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/products/{{ProductId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products",
						"{{ProductId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Product is marked as deleted\", function () {",
							"    pm.expect(pm.response.json().isDeleted).to.eql(true);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/products/{{ProductId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products",
						"{{ProductId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Response body contains the expected user and product details\", function () {",
							"    var responseJson = pm.response.json();",
							"    ",
							"    pm.expect(responseJson.userId).to.eql(9);  ",
							"    pm.expect(responseJson.id).to.eql(51);     ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{UserId}}\",\n    \"products\": [\n      {\n        \"id\": 150,\n        \"quantity\": 4\n      },\n      {\n        \"id\": 1,\n        \"quantity\": 1\n      }\n    ]\n  }\n\n"
				},
				"url": {
					"raw": "{{BASE_URL}}/carts/add",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"carts",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"ID is 168\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"merge\": true, \n    \"products\": [\n      {\n        \"id\": 168,\n        \"quantity\": 1\n      }\n    ]\n}\n"
				},
				"url": {
					"raw": "{{BASE_URL}}/carts/{{CartId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"carts",
						"{{CartId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get A Single Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Cart ID is 1\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/carts/{{CartId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"carts",
						"{{CartId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Post title is correct\", function () {",
							"    pm.expect(pm.response.json().title).to.eql(\"I am in love with my new product\");",
							"});",
							"",
							"pm.test(\"User ID is 9\", function () {",
							"    pm.expect(pm.response.json().userId).to.eql(9);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"I am in love with my new product\",\n    \"userId\": 9\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/posts/add",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"posts",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Todo is marked as deleted\", function () {",
							"    pm.expect(pm.response.json().isDeleted).to.eql(true);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/todos/{{TodoId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"todos",
						"{{TodoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () { pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\"); });",
							"",
							"pm.test(\"Response body is not empty\", function () { pm.expect(pm.response.text()).to.not.be.empty; });",
							"",
							"pm.test(\"Logout successful\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Logged out successfully\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/auth/logout",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "patchName",
			"value": ""
		},
		{
			"key": "patchLastName",
			"value": ""
		}
	]
}